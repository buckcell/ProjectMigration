unit MyUtils;

interface

uses
  System.SysUtils, System.Classes, System.Variants, System.StrUtils, System.Types;

type
  TStringMatrix = array of TStringDynArray;

  TDataFlex = class
  private
    StrList: TStringList;
    Rows: integer;
    Cols: integer;

    function Cut(Str: string): TStringDynArray;

  public
    constructor Create(StrList: TStringList);

    function GetRows: integer;
    function GetCols: integer;

    function ToMatrix(StrList: TStringList): TStringMatrix;

  end;

implementation

{ TDataFlex }

function TDataFlex.Cut(Str: string): TStringDynArray;
var
  StrSize: integer;
begin
  StrSize := Length(SplitString(Str, ';'));
  SetLength(Result, StrSize);
  Result := SplitString(Str, ';');
end;

constructor TDataFlex.Create(StrList: TStringList);
begin
  self.Rows := StrList.Count;
  self.Cols := Length(Cut(StrList[0]));
end;

function TDataFlex.GetRows: integer;
begin
  Result := self.Rows;
end;

function TDataFlex.GetCols: integer;
begin
  Result := self.Cols;
end;

function TDataFlex.ToMatrix(StrList: TStringList): TStringMatrix;
var
  Cont, TotRow, TotCol: integer;
begin
  TotRow := StrList.Count;
  TotCol := Length(Cut(StrList[0]));
  SetLength(Result, TotRow, TotCol);
  for Cont := 0 to TotRow - 1 do
  begin
    Result[Cont] := Cut(StrList[Cont]);
  end;
end;

end.
